{"version":3,"sources":["App.js","components/Result/ResultComponent.js","components/Keypad/KeypadComponent.js","serviceWorker.js","index.js"],"names":["App","props","handleClick","buttonType","console","log","calculateResult","clearResult","setState","result","state","eval","e","this","buttonClick","Component","ResultComponent","className","KeypadComponent","name","onClick","event","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b135da89.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ResultComponent from './components/Result/ResultComponent';\nimport KeypadComponent from './components/Keypad/KeypadComponent';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: '0',\n    };\n  }\n\n  handleClick = (buttonType) => {\n    console.log(buttonType);\n    if (buttonType === '=') this.calculateResult();\n    else if (buttonType === 'C') this.clearResult();\n    else {\n      this.setState({\n        result: this.state.result + buttonType,\n      });\n    }\n  };\n\n  calculateResult = () => {\n    try {\n      this.setState({\n        result: eval(this.state.result) + '',\n      });\n    } catch (e) {\n      this.setState({\n        result: 'error',\n      });\n    }\n  };\n\n  clearResult = () => {\n    this.setState({\n      result: '0',\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Calculator</h1>\n        <ResultComponent result={this.state.result} />\n        <KeypadComponent buttonClick={this.handleClick} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './Result.component.css'\n\nconst ResultComponent = (props) => {\n  return (\n    <div className='container result'>\n      {props.result}\n    </div>\n  );\n};\n\nexport default ResultComponent;\n","import React from 'react';\nimport './Keypad.component.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst KeypadComponent = (props) => {\n  return (\n    <div className='container'>\n      <div className='row'>\n        <button\n          name='C'\n          className='col-9'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          C\n        </button>\n        <button\n          name='='\n          className='col-3 formula'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          =\n        </button>\n      </div>\n\n      <div className='row'>\n        <button\n          name='1'\n          className='col'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          1\n        </button>\n        <button\n          name='2'\n          className='col'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          2\n        </button>\n        <button\n          name='3'\n          className='col'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          3\n        </button>\n        <button\n          name='+'\n          className='col formula'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          +\n        </button>\n      </div>\n\n      <div className='row'>\n        <button\n          name='4'\n          className='col'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          4\n        </button>\n        <button\n          name='5'\n          className='col'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          5\n        </button>\n        <button\n          name='6'\n          className='col'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          6\n        </button>\n        <button\n          name='-'\n          className='col formula'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          -\n        </button>\n      </div>\n\n      <div className='row'>\n        <button\n          name='7'\n          className='col'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          7\n        </button>\n        <button\n          name='8'\n          className='col'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          8\n        </button>\n        <button\n          name='9'\n          className='col'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          9\n        </button>\n        <button\n          name='*'\n          className='col formula'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          x\n        </button>\n      </div>\n\n      <div className='row'>\n        <button\n          name='.'\n          className='col'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          .\n        </button>\n        <button\n          name='0'\n          className='col-6'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          0\n        </button>\n        <button\n          name='/'\n          className='col formula'\n          onClick={(event) => props.buttonClick(event.target.name)}\n        >\n          รท\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default KeypadComponent;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}